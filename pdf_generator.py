# Archivo: pdf_generator.py - VERSI√ìN CORREGIDA PARA TEXTO COMPLETO

"""
Generador de PDFs para fichas metodol√≥gicas del Dashboard ICE - CORREGIDO PARA MOSTRAR TEXTO COMPLETO
"""

import streamlit as st
import pandas as pd
from io import BytesIO
from datetime import datetime

# Importaci√≥n condicional de reportlab
try:
    from reportlab.lib.pagesizes import letter, A4
    from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, PageBreak
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    from reportlab.lib.units import inch
    from reportlab.lib import colors
    from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_JUSTIFY
    PDF_AVAILABLE = True
except ImportError:
    PDF_AVAILABLE = False

class PDFGenerator:
    """Generador de fichas metodol√≥gicas en PDF - CORREGIDO PARA TEXTO COMPLETO"""
    
    def __init__(self):
        self.pdf_available = PDF_AVAILABLE
    
    def generate_metodological_sheet(self, codigo, excel_data):
        """Generar ficha metodol√≥gica en PDF - M√âTODO PRINCIPAL CORREGIDO"""
        try:
            if not self.pdf_available:
                st.error("üì¶ **Para descargar PDFs instala:** `pip install reportlab`")
                return None
            
            if excel_data is None or excel_data.empty:
                st.error("‚ùå No hay datos metodol√≥gicos disponibles. Aseg√∫rate de que 'Bater√≠a de indicadores.xlsx' est√© en el directorio.")
                return None
            
            # Buscar datos del indicador
            indicador_data = excel_data[excel_data['Codigo'] == codigo]
            
            if indicador_data.empty:
                st.error(f"‚ùå No se encontraron datos metodol√≥gicos para el c√≥digo {codigo}")
                
                # Mostrar c√≥digos disponibles
                codigos_disponibles = excel_data['Codigo'].dropna().unique().tolist()
                if codigos_disponibles:
                    st.info(f"üí° C√≥digos disponibles en Excel: {', '.join(map(str, codigos_disponibles[:10]))}")
                    if len(codigos_disponibles) > 10:
                        st.info(f"... y {len(codigos_disponibles) - 10} m√°s")
                
                return None
            
            # Obtener datos del indicador
            datos = indicador_data.iloc[0]
            
            # Crear documento PDF con m√°rgenes ajustados
            buffer = BytesIO()
            doc = SimpleDocTemplate(
                buffer,
                pagesize=A4,
                rightMargin=50,
                leftMargin=50,
                topMargin=60,
                bottomMargin=60
            )
            
            # Crear estilos
            story = self._build_pdf_content(datos, codigo)
            
            # Generar PDF
            doc.build(story)
            
            # Obtener datos del buffer
            pdf_data = buffer.getvalue()
            buffer.close()
            
            return pdf_data
            
        except Exception as e:
            st.error(f"‚ùå Error al generar PDF: {e}")
            import traceback
            with st.expander("üîß Detalles del error"):
                st.code(traceback.format_exc())
            return None
    
    def _build_pdf_content(self, datos, codigo):
        """Construir contenido del PDF con mejor manejo de texto largo"""
        # Crear estilos mejorados
        styles = getSampleStyleSheet()
        
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontSize=18,
            spaceAfter=30,
            alignment=TA_CENTER,
            textColor=colors.HexColor('#4472C4')
        )
        
        subtitle_style = ParagraphStyle(
            'CustomSubtitle',
            parent=styles['Heading2'],
            fontSize=14,
            spaceAfter=15,
            spaceBefore=20,
            textColor=colors.HexColor('#4472C4'),
            borderWidth=1,
            borderColor=colors.HexColor('#4472C4'),
            borderPadding=8,
            backColor=colors.HexColor('#F8F9FA')
        )
        
        normal_style = ParagraphStyle(
            'CustomNormal',
            parent=styles['Normal'],
            fontSize=10,
            spaceAfter=8,
            alignment=TA_JUSTIFY,
            leading=12
        )
        
        label_style = ParagraphStyle(
            'CustomLabel',
            parent=styles['Normal'],
            fontSize=10,
            spaceAfter=6,
            textColor=colors.HexColor('#2C3E50'),
            fontName='Helvetica-Bold'
        )
        
        # Construir contenido del documento
        story = []
        
        # T√≠tulo principal
        story.append(Paragraph("FICHA METODOL√ìGICA DE INDICADOR", title_style))
        story.append(Paragraph("Dashboard ICE - Infraestructura de Conocimiento Espacial", normal_style))
        story.append(Spacer(1, 20))
        
        # Informaci√≥n institucional
        story.append(Paragraph("INFORMACI√ìN DEL DOCUMENTO", subtitle_style))
        
        institucion_data = [
            ['Sistema:', 'Dashboard ICE - Infraestructura de Conocimiento Espacial'],
            ['Fecha de generaci√≥n:', datetime.now().strftime('%d/%m/%Y %H:%M:%S')],
            ['C√≥digo del indicador:', codigo]
        ]
        
        institucion_table = self._create_simple_table(institucion_data)
        story.append(institucion_table)
        story.append(Spacer(1, 20))
        
        # 1. INFORMACI√ìN B√ÅSICA
        story.append(Paragraph("1. INFORMACI√ìN B√ÅSICA", subtitle_style))
        
        basic_data = [
            ['Nombre del indicador:', self._safe_get(datos, 'Nombre_Indicador', 'N/A')],
            ['C√≥digo:', codigo],
            ['√Årea tem√°tica:', self._safe_get(datos, 'Area_Tematica', 'N/A')],
            ['Tema:', self._safe_get(datos, 'Tema', 'N/A')],
            ['Sector:', self._safe_get(datos, 'Sector', 'N/A')],
            ['Entidad responsable:', self._safe_get(datos, 'Entidad', 'N/A')],
            ['Dependencia:', self._safe_get(datos, 'Dependencia', 'N/A')]
        ]
        
        basic_table = self._create_flexible_table(basic_data)
        story.append(basic_table)
        story.append(Spacer(1, 15))
        
        # 2. DEFINICI√ìN Y OBJETIVO
        story.append(Paragraph("2. DEFINICI√ìN Y OBJETIVO", subtitle_style))
        
        definicion = self._safe_get(datos, 'Definicion', 'No disponible')
        objetivo = self._safe_get(datos, 'Objetivo', 'No disponible')
        
        if definicion != 'No disponible':
            story.append(Paragraph("<b>Definici√≥n:</b>", label_style))
            story.append(Paragraph(definicion, normal_style))
            story.append(Spacer(1, 10))
        
        if objetivo != 'No disponible':
            story.append(Paragraph("<b>Objetivo:</b>", label_style))
            story.append(Paragraph(objetivo, normal_style))
            story.append(Spacer(1, 15))
        
        # 3. METODOLOG√çA DE C√ÅLCULO
        story.append(Paragraph("3. METODOLOG√çA DE C√ÅLCULO", subtitle_style))
        
        methodology_data = [
            ['F√≥rmula de c√°lculo:', self._safe_get(datos, 'Formula_Calculo', 'N/A')],
            ['Variables:', self._safe_get(datos, 'Variables', 'N/A')],
            ['Unidad de medida:', self._safe_get(datos, 'Unidad_Medida', 'N/A')],
            ['Metodolog√≠a de c√°lculo:', self._safe_get(datos, 'Metodologia_Calculo', 'N/A')],
            ['Tipo de acumulaci√≥n:', self._safe_get(datos, 'Tipo_Acumulacion', 'N/A')]
        ]
        
        methodology_table = self._create_flexible_table(methodology_data)
        story.append(methodology_table)
        story.append(Spacer(1, 15))
        
        # 4. INFORMACI√ìN T√âCNICA
        story.append(Paragraph("4. INFORMACI√ìN T√âCNICA", subtitle_style))
        
        technical_data = [
            ['Fuente de informaci√≥n:', self._safe_get(datos, 'Fuente_Informacion', 'N/A')],
            ['Tipo de indicador:', self._safe_get(datos, 'Tipo_Indicador', 'N/A')],
            ['Periodicidad:', self._safe_get(datos, 'Periodicidad', 'N/A')],
            ['Desagregaci√≥n geogr√°fica:', self._safe_get(datos, 'Desagregacion_Geografica', 'N/A')],
            ['Desagregaci√≥n poblacional:', self._safe_get(datos, 'Desagregacion_Poblacional', 'N/A')],
            ['Clasificaci√≥n seg√∫n calidad:', self._safe_get(datos, 'Clasificacion_Calidad', 'N/A')],
            ['Clasificaci√≥n seg√∫n intervenci√≥n:', self._safe_get(datos, 'Clasificacion_Intervencion', 'N/A')]
        ]
        
        technical_table = self._create_flexible_table(technical_data)
        story.append(technical_table)
        story.append(Spacer(1, 15))
        
        # 5. OBSERVACIONES Y LIMITACIONES
        observaciones = self._safe_get(datos, 'Observaciones', '')
        limitaciones = self._safe_get(datos, 'Limitaciones', '')
        interpretacion = self._safe_get(datos, 'Interpretacion', '')
        
        if observaciones != 'N/A' or limitaciones != 'N/A' or interpretacion != 'N/A':
            story.append(Paragraph("5. OBSERVACIONES Y LIMITACIONES", subtitle_style))
            
            if observaciones != 'N/A':
                story.append(Paragraph("<b>Observaciones:</b>", label_style))
                story.append(Paragraph(observaciones, normal_style))
                story.append(Spacer(1, 10))
            
            if limitaciones != 'N/A':
                story.append(Paragraph("<b>Limitaciones:</b>", label_style))
                story.append(Paragraph(limitaciones, normal_style))
                story.append(Spacer(1, 10))
            
            if interpretacion != 'N/A':
                story.append(Paragraph("<b>Interpretaci√≥n:</b>", label_style))
                story.append(Paragraph(interpretacion, normal_style))
                story.append(Spacer(1, 15))
        
        # 6. INFORMACI√ìN DE CONTACTO
        story.append(Paragraph("6. INFORMACI√ìN DE CONTACTO", subtitle_style))
        
        contact_data = [
            ['Directivo responsable:', self._safe_get(datos, 'Directivo_Responsable', 'N/A')],
            ['Correo electr√≥nico:', self._safe_get(datos, 'Correo_Directivo', 'N/A')],
            ['Tel√©fono de contacto:', self._safe_get(datos, 'Telefono_Contacto', 'N/A')]
        ]
        
        contact_table = self._create_flexible_table(contact_data)
        story.append(contact_table)
        
        # 7. ENLACES Y SOPORTE LEGAL
        enlaces = self._safe_get(datos, 'Enlaces_Web', '')
        soporte = self._safe_get(datos, 'Soporte_Legal', '')
        
        if enlaces != 'N/A':
            story.append(Spacer(1, 15))
            story.append(Paragraph("7. ENLACES RELACIONADOS", subtitle_style))
            story.append(Paragraph(enlaces, normal_style))
        
        if soporte != 'N/A':
            story.append(Spacer(1, 15))
            story.append(Paragraph("8. SOPORTE LEGAL", subtitle_style))
            story.append(Paragraph(soporte, normal_style))
        
        return story
    
    def _safe_get(self, datos, campo, default='N/A'):
        """Obtener valor de forma segura manejando NaN y preservando texto completo"""
        try:
            valor = datos.get(campo, default)
            if pd.isna(valor) or valor == '' or str(valor).strip() == '':
                return default
            
            texto = str(valor).strip()
            
            # Limpiar el texto pero preservarlo completo
            # Reemplazar caracteres problem√°ticos
            texto = texto.replace('\r\n', '\n').replace('\r', '\n')
            
            # Escapar caracteres especiales de HTML/XML
            texto = texto.replace('&', '&amp;')
            texto = texto.replace('<', '&lt;')
            texto = texto.replace('>', '&gt;')
            
            return texto if texto else default
            
        except Exception as e:
            return default
    
    def _create_simple_table(self, data):
        """Crear tabla simple para informaci√≥n institucional"""
        table = Table(data, colWidths=[2.5*inch, 4*inch])
        table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (0, -1), colors.HexColor('#4472C4')),
            ('TEXTCOLOR', (0, 0), (0, -1), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
            ('TOPPADDING', (0, 0), (-1, -1), 8),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('VALIGN', (0, 0), (-1, -1), 'TOP')
        ]))
        return table
    
    def _create_flexible_table(self, data):
        """Crear tabla flexible que se adapta al contenido largo"""
        # Preparar datos con Paragraphs para texto largo
        processed_data = []
        
        for row in data:
            if len(row) >= 2:
                label = row[0]
                content = row[1]
                
                # Crear paragraph para contenido largo
                if len(str(content)) > 80:
                    # Usar Paragraph para texto largo
                    content_paragraph = Paragraph(str(content), getSampleStyleSheet()['Normal'])
                    processed_data.append([label, content_paragraph])
                else:
                    processed_data.append([label, str(content)])
            else:
                processed_data.append(row)
        
        # Determinar anchos de columna din√°micamente
        max_content_length = max([len(str(row[1])) for row in data if len(row) >= 2] + [0])
        
        if max_content_length > 200:
            col_widths = [2*inch, 4.5*inch]
        elif max_content_length > 100:
            col_widths = [2.2*inch, 4.3*inch]
        else:
            col_widths = [2.5*inch, 4*inch]
        
        table = Table(processed_data, colWidths=col_widths, repeatRows=0)
        table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (0, -1), colors.HexColor('#E7F3FF')),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('VALIGN', (0, 0), (-1, -1), 'TOP'),
            ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 0), (-1, -1), 9),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
            ('TOPPADDING', (0, 0), (-1, -1), 8),
            ('LEFTPADDING', (0, 0), (-1, -1), 6),
            ('RIGHTPADDING', (0, 0), (-1, -1), 6),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('ROWBACKGROUNDS', (0, 0), (-1, -1), [colors.white, colors.HexColor('#F8F9FA')])
        ]))
        
        return table
    
    def is_available(self):
        """Verificar si PDF est√° disponible"""
        return self.pdf_available
